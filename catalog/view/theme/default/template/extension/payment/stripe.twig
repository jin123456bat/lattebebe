<?php
//==============================================================================
// Stripe Payment Gateway v302.6
// 
// Author: Clear Thinking, LLC
// E-mail: johnathan@getclearthinking.com
// Website: http://www.getclearthinking.com
// 
// All code within this file is copyright Clear Thinking, LLC.
// You may not copy or reuse code within this file without written permission.
//==============================================================================
?>

<script>
	<?php if ($settings['transaction_mode'] == 'live') { ?>
		if (window.location.protocol != 'https:') {
			displayError('You are in LIVE mode but are not on a secure (https) connection! Payment info is not secure!');
		}
	<?php } ?>
	
	var stripe;
	var card;
	var owner = {
		name: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['firstname'] ? $order_info['firstname'] . ' ' . $order_info['lastname'] : 'none', ENT_QUOTES, 'UTF-8'))); ?>',
		email: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['email'] ? $order_info['email'] : 'no@email.com', ENT_QUOTES, 'UTF-8'))); ?>',
		phone: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['telephone'] ? $order_info['telephone'] : 'none', ENT_QUOTES, 'UTF-8'))); ?>',
		address: {
			line1: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['payment_address_1'], ENT_QUOTES, 'UTF-8'))); ?>',
			line2: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['payment_address_2'], ENT_QUOTES, 'UTF-8'))); ?>',
			city: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['payment_city'], ENT_QUOTES, 'UTF-8'))); ?>',
			state: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['payment_zone'], ENT_QUOTES, 'UTF-8'))); ?>',
			postal_code: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['payment_postcode'], ENT_QUOTES, 'UTF-8'))); ?>',
			country: '<?php echo trim(str_replace("'", "\'", html_entity_decode($order_info['payment_country'], ENT_QUOTES, 'UTF-8'))); ?>'
		}
	};
	
	var stripe_errors = {
		<?php foreach ($stripe_errors as $stripe_error) { ?>
			<?php echo $stripe_error; ?>: '<?php echo str_replace("'", "\'", html_entity_decode($settings['error_' . $stripe_error . '_' . $language], ENT_QUOTES, 'UTF-8')); ?>',
		<?php } ?>
	}
</script>

<?php if ($settings['use_checkout'] == 'all' || ($settings['use_checkout'] == 'desktop' && !$is_mobile) || $embed) { ?>
	
	<div id="payment"></div>
	<script>
		var handler;
		
		$.getScript('https://checkout.stripe.com/checkout.js', function(data) {
			handler = StripeCheckout.configure({
				// Required
				key:				'<?php echo $settings[$settings['transaction_mode'].'_publishable_key']; ?>',
				token:				function(token, args) { displayWait(); chargeSource(token, args); },
				
				// Highly Recommended
				name:				'<?php echo str_replace("'", "\'", $checkout_title); ?>',
				amount:				<?php echo $checkout_amount; ?>,
				locale:				'auto',
			<?php if ($checkout_image) { ?>
				image:				'<?php echo $checkout_image; ?>',
			<?php } ?>
			<?php if ($checkout_description) { ?>
				description:		'<?php echo str_replace("'", "\'", $checkout_description); ?>',
			<?php } ?>
				
				// Optional
			<?php if ($checkout_button) { ?>
				panelLabel:			'<?php echo str_replace(array("'", '[amount]'), array("\'", '{{amount}}'), $checkout_button); ?>',
			<?php } ?>
				currency:			'<?php echo strtolower($currency); ?>',
				billingAddress:		<?php echo (!empty($settings['checkout_billing'])) ? 'true' : 'false'; ?>,
				shippingAddress:	<?php echo (!empty($settings['checkout_shipping'])) ? 'true' : 'false'; ?>,
				email:				'<?php echo $order_info['email']; ?>',
				allowRememberMe:	<?php echo (!empty($settings['checkout_remember_me'])) ? 'true' : 'false'; ?>,
			});
		});
		
		function confirmOrder() {
			<?php if (!empty($settings['checkout_shipping']) && $no_shipping_method) { ?>
				alert('<?php echo str_replace("'", "\'", $settings['error_shipping_required_' . $language]); ?>');
			<?php } else { ?>
				handler.open();
			<?php } ?>
			return false;
		}
	</script>
	
<?php } else { ?>
	
	<style type="text/css">
	 	/* Journal fixes */
		#content .payment-stripe, #payment-request-button {
			display: block !important;
		}
		/* end */
		#payment {
			text-align: center;
		}
		#card-select, #stored-card, #new-card, #card-element, #payment label {
			display: inline-block;
		}
		#card-select {
			width: 200px;
			margin: 0 10px 10px 0;
		}
		#stored-card {
			margin-top: 10px;
			padding: 5px;
		}
		#new-card {
			max-width: 100%;
		}
		#card-element {
			background: #FFF;
			border: 1px solid #DDD;
			border-radius: 10px;
			margin-right: 10px;
			padding: 0 15px;
			vertical-align: middle;
			width: 300px;
			max-width: 100%;
		}
		.StripeElement--complete {
			border: 1px solid #0C0 !important;
		}
		#payment label {
			cursor: pointer;
		}
		#store-card {
			cursor: pointer;
			margin-top: 10px;
		}
		.alert {
			margin-top: 10px;
		}
		.buttons {
			margin-bottom: 10px;
		}
	</style>
	
	<form id="payment" class="form-horizontal">
		<fieldset id="card-fieldset">
			<legend><?php echo html_entity_decode($settings['text_card_details_' . $language], ENT_QUOTES, 'UTF-8'); ?></legend>
		<?php if (!empty($customer['default_source'])) { ?>
			<select id="card-select" class="form-control" onchange="if ($('#new-card').css('display') == 'none') { $('#stored-card').fadeOut(400, function(){$('#new-card').fadeIn()}); } else { $('#new-card').fadeOut(400, function(){$('#stored-card').fadeIn()}); }">
				<option value="stored"><?php echo html_entity_decode($settings['text_use_your_stored_card_' . $language], ENT_QUOTES, 'UTF-8'); ?></option>
				<option value="new"><?php echo html_entity_decode($settings['text_use_a_new_card_' . $language], ENT_QUOTES, 'UTF-8'); ?></option>
			</select>
			<div id="stored-card">
				<?php $default_source = (!empty($customer['default_source']['brand'])) ? $customer['default_source'] : $customer['default_source']['card']; ?>
				<?php echo $default_source['brand'] . ' ' . html_entity_decode($settings['text_ending_in_' . $language], ENT_QUOTES, 'UTF-8') . ' ' . $default_source['last4']; ?>
				(<?php echo str_pad($default_source['exp_month'], 2, '0', STR_PAD_LEFT) . '/' . substr($default_source['exp_year'], 2); ?>)
			</div>
			<div id="new-card" style="display: none">
		<?php } else { ?>
			<div id="new-card">
		<?php } ?>
				<div id="card-element"></div>
				<?php if ($logged_in && $settings['allow_stored_cards'] && $settings['send_customer_data'] == 'choice') { ?>					
					<label><?php echo html_entity_decode($settings['text_store_card_' . $language], ENT_QUOTES, 'UTF-8'); ?> <input type="checkbox" id="store-card" /></label>
				<?php } ?>
			</div>
		</fieldset>
	</form>
	
	<script>
		function confirmOrder() {
			displayWait();
			
			if ($('#new-card').css('display') == 'none') {
				chargeSource('', '');
			} else {
				var cardOwner = {
					owner: owner
				};
				
				stripe.createSource(card, cardOwner).then(function(result){
					if (result.error) {
						displayError(stripe_errors[result.error.code] ? stripe_errors[result.error.code] : result.error.message);
					} else {
						chargeSource(result.source, '');
					}
				});
			}
		}
		
		$.getScript('https://js.stripe.com/v3/', function(data) {
			stripe = Stripe('<?php echo $settings[$settings['transaction_mode'].'_publishable_key']; ?>');
			stripeElements = stripe.elements({locale: '<?php echo substr($language, 0, 2); ?>'});
			card = stripeElements.create('card', {
				hidePostalCode: true,
				//iconStyle: 'solid', // use solid if you are on a dark background
				style: {
					base: {
						// full styling options are available at https://stripe.com/docs/stripe.js#element-options
						color: '#444',
						fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
						fontSize: '15px',
						iconColor: '#66F',
						lineHeight: '40px',
						'::placeholder': {
							color: '#CCC',
						},
					},
				}
			});
			card.on('change', function(event){
				/*
				$('.alert').remove();
				if (event.error) {
					displayError(event.error.message);
				}
				*/
			}).mount('#card-element');
		});
	</script>
	
<?php } ?>

<div id="payment-buttons" class="buttons">
	<div class="right pull-right">
		<a id="button-confirm" onclick="confirmOrder()" class="<?php echo $settings['button_class']; ?>" style="<?php echo $settings['button_styling']; ?>">
			<?php echo $settings['button_text_' . $language]; ?>
		</a>
	</div>
</div>

<script>
	function displayWait() {
		$('#button-confirm').removeAttr('onclick').attr('disabled', 'disabled');
		$('#card-select').attr('disabled', 'disabled');
		$('.alert').remove();
		$('#payment').after('<div class="alert alert-warning" style="display: none"><i class="fa fa-spinner fa-spin"></i> &nbsp; <?php echo str_replace("'", "\'", html_entity_decode($settings['text_please_wait_' . $language], ENT_QUOTES, 'UTF-8')); ?></div>');
		$('.alert-warning').fadeIn();
	}
	
	function displayError(message) {
		if (typeof triggerLoadingOff == 'function') triggerLoadingOff(); // Journal fix
		$('.alert').remove();
		$('#payment').after('<div class="alert alert-danger" style="display: none"><i class="fa fa-exclamation-triangle"></i> &nbsp; ' + message.trim() + '</div>');
		$('.alert-danger').fadeIn();
		$('#button-confirm').attr('onclick', 'confirmOrder()').removeAttr('disabled');
		$('#card-select').removeAttr('disabled');
	}
	
	function chargeSource(source, addresses) {
		$.ajax({
			type: 'POST',
			url: 'index.php?route=extension/<?php echo $type . '/' . $name; ?>/chargeSource',
			data: {source: source.id, email: source.email, addresses: addresses, store_card: $('#store-card').is(':checked'), embed: <?php echo (int)$embed; ?>},
			success: function(error) {
				if (error.trim()) {
					displayError(error);
				} else {
					completeOrder();
				}
			},
			error: function(xhr, status, error) {
				displayError(xhr.responseText ? xhr.responseText : error);
			}
		});
	}
	
	function completeOrder() {
		$.ajax({
			url: 'index.php?route=extension/<?php echo $type; ?>/<?php echo $name; ?>/completeOrder',
			success: function(error) {
				if (error.trim()) {
					completeWithError(error.trim());
				} else {
					location = '<?php echo $checkout_success; ?>';
				}
			},
			error: function(xhr, status, error) {
				completeWithError(xhr.responseText ? xhr.responseText : error);
			}
		});
	}
	
	function completeWithError(errorMessage) {
		$.ajax({
			type: 'POST',
			url: 'index.php?route=extension/<?php echo $type; ?>/<?php echo $name; ?>/completeWithError',
			data: {error_message: errorMessage},
			success: function(error) {
				if (error.trim()) {
					triggerFatalError(error);
				} else {
					location = '<?php echo $checkout_success; ?>';
				}
			},
			error: function(xhr, status, error) {
				triggerFatalError(xhr.responseText ? xhr.responseText : error);
			}
		});
	}
	
	function triggerFatalError(errorMessage) {
		$('.alert').remove();
		$('#payment').after('<div class="warning alert alert-danger"><i class="fa fa-exclamation-triangle"></i> <strong>Fatal Error:</strong> Your payment was completed successfully, but the system encountered a fatal error when trying to complete your order. Please do not resubmit your order! Instead, please <a target="_blank" href="index.php?route=information/contact">contact the store administrator</a> with your order number (#<?php echo $order_info['order_id']; ?>) and the following error message:<br /><br />' + errorMessage.trim() + '</div>');
	}
</script>
